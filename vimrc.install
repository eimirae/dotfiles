" #################### Vundle Plugins #################### 
set nocompatible
filetype on " Fix vim exiting with bad error code if filetype is already off (git commit problems)

if has("user_commands")
  set rtp+=~/.vim/bundle/vundle/
  runtime autoload/vundle.vim
endif

if exists("*vundle#rc")
  " $ git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
  filetype off " required!

  call vundle#rc()

  Bundle 'pathogen.vim'
  Bundle 'gmarik/vundle'
  Bundle 'Lokaltog/vim-powerline'
  Bundle 'groenewege/vim-less' 
  Bundle 'fugitive.vim' 
  Bundle 'gmarik/sudo-gui.vim'
  Bundle 'matlab.vim'
  Bundle 'Tabular'
  Bundle 'Syntastic'
  Bundle 'Wombat'
  Bundle 'scrooloose/nerdtree'
  "Bundle 'Tagbar'
  "Bundle 'Arduino-syntax-file'
  "Bundle 'pyflakes.vim'
  "Bundle 'davidhalter/jedi-vim'

  colorscheme wombat

  filetype plugin indent on     " required! 
endif
" 
" #################### Miscellaneous Settings #################### 
" Basic Settings ------------------------------ 
syntax on
set encoding=utf-8
set autochdir
set ruler
set autoindent
set smartindent
set shiftwidth=2
set tabstop=2
set expandtab
set showmatch
set hlsearch                   "Highlight searches
set guioptions-=T
set showmode                   "Tell me when I'm in insert mode
set ttyfast                    "We're on a fast connection, it's ok to send lots of bytes
set showbreak=↪
set fillchars=diff:⣿
set autoread                   "Detect when open files have changed and reopen them
set title
set formatoptions=qn1          "See :help fo-table for options here
set number
set diffopt+=iwhite
set nobackup "Backup off, since most stuff is in SVN, git et.c anyway...
set nowritebackup
set guifont=Consolas\ 14
syntax on

" <Ctrl-l> redraws the screen and removes search highlighting.
nnoremap <silent> <C-l> :nohl<CR><C-l>

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>=" 

" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*
set grepformat=%f:%l:%m

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" #################### Key Mappings #################### 
let mapleader=","

" -: Move current line down
nnoremap - ddp

" _: Move current line up
nnoremap _ ddkP

" Edit Vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<cr>

" Source Vimrc
nnoremap <leader>sv :source $MYVIMRC<cr>

" Beginning of line
nnoremap H 0

" End of line
nnoremap L $

" Remap Esc to JK...
" Always use jk to return to normal mode
inoremap jk <esc>

" #################### powerline settings ####################  
set laststatus=2
" #################### Filetype Settings ####################  
" Makefile file settings -------------------- 
augroup filetype_make
  autocmd!
  " Don't expand tabs when editing makefiles
  autocmd! FileType make setlocal noexpandtab
augroup END

" Vimscript file settings -------------------- 
augroup filetype_vim
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
  autocmd FileType vim set foldlevelstart=0
augroup END
" 
" Text file settings -------------------- 
augroup filetype_txt
  autocmd BufNewFile,BufRead *.txt setlocal ft=none
  autocmd BufNewFile,BufRead *.txt setlocal spell
  autocmd BufNewFile,BufRead *.txt setlocal foldmethod=marker
augroup END
" 
" 
" #################### Miscellaneous Functions ####################  
" AlignEq() ------------------------------ 
" type ",=" to align a block of equals signs
if has('python')
python << endpython
def AlignEq():
  import vim
  maxspaces = 0
  for line in vim.current.range:
    equals = line.find('=')
    maxspaces = max(maxspaces, len(line[0:equals].rstrip()))

  for index, line in enumerate(vim.current.range):
    equals = line.find('=')
    if equals == -1: continue
    vim.current.range[index] = line[0:equals].rstrip() + ' ' * (maxspaces - len(line[0:equals].rstrip())) + ' = ' + line[equals+1:].lstrip()

endpython
vmap ,= :python AlignEq()<CR>
endif
"
" Functional Programming ------------------------------  
  function! Sorted(l)
    let new_list = deepcopy(a:l)
    call sort(new_list)
    return new_list
  endfunction

  function! Reversed(l)
    let new_list = deepcopy(a:l)
    call reverse(new_list)
    return new_list
  endfunction

  function! Append(l, val)
    let new_list = deepcopy(a:l)
    call add(new_list, a:val)
    return new_list
  endfunction

  function! Assoc(l, i, val)
    let new_list = deepcopy(a:l)
    let new_list[a:i] = a:val
    return new_list
  endfunction

  function! Pop(l, i)
    let new_list = deepcopy(a:l)
    call remove(new_list, a:i)
    return new_list
  endfunction

  function! Mapped(fn, l)
    let new_list = deepcopy(a:l)
    call map(new_list, string(a:fn) . '(v:val)')
    return new_list
  endfunction

  function! Filtered(fn, l)
    let new_list = deepcopy(a:l)
    call filter(new_list, string(a:fn) . '(v:val)')
    return new_list
  endfunction

  function! Removed(fn, l)
    let new_list = deepcopy(a:l)
    call filter(new_list, '!' . string(a:fn) . '(v:val)')
    return new_list
  endfunction
" 
"

" vim:syntax=vim
