" #################### Vundle Plugins #################### 
set nocompatible
filetype on " Fix vim exiting with bad error code if filetype is already off (git commit problems)

if has("user_commands")
  set rtp+=~/.vim/bundle/vundle/
  runtime autoload/vundle.vim
endif

if exists("*vundle#rc")
  " $ git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
  filetype off " required!

  call vundle#rc()

  " required for vundle
  Bundle 'pathogen.vim'

  " vundle
  Bundle 'gmarik/vundle'

  " cool status line 
  Bundle 'Lokaltog/powerline'
  set rtp+=~/.vim/bundle/vundle/powerline/bindings/vim

  " Syntax checking
  Bundle 'Syntastic'

  " Explore the filesystem in a tree
  Bundle 'scrooloose/nerdtree'

  " Browse tags
  Bundle 'Tagbar'

  " Color scheme
  Bundle 'Wombat'
  colorscheme wombat

  " Python autocompletion
  "Bundle 'davidhalter/jedi-vim'

  " Git wrapper
  "Bundle 'fugitive.vim' 

  " Align text (Using AlignEq (defined below) for aligning on =)
  "Bundle 'Tabular'

  filetype plugin indent on     " required! 
endif
" 
" #################### Miscellaneous Settings #################### 
" Basic Settings ------------------------------ 
syntax on
set encoding=utf-8
set autochdir " set cwd to the current file's dir
set ruler " show line, col, line% in bottom right corner
set autoindent
set smartindent
set expandtab " spaces instead of tabs
set tabstop=2 " cols per tab
set shiftwidth=2 " cols per shift (>> and <<)
set showmatch " briefly show the matching bracket when you type it (won't scroll)
set hlsearch " highlight searches
set guioptions-=T " no toolbar
set showmode " tell me when I'm in insert mode
set ttyfast " we're on a fast connection, it's ok to send lots of bytes
set showbreak=↪ " character to show on a line wrap
set fillchars=diff:⣿ " for splits 
set autoread " detect when open files have changed and reopen them
set title " set the title bar
set formatoptions=qn1 " see :help fo-table for options here
set number " line numbers
set diffopt+=iwhite " ignore whitespace in diffs
set nobackup " backup off, since most stuff is in SVN, git et.c anyway...
set nowritebackup
set dir=~/.vim/swp
set guifont=Consolas\ 14

" <Ctrl-l> redraws the screen and removes search highlighting.
nnoremap <silent> <C-l> :nohl<CR><C-l>

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>=" 

" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*
set grepformat=%f:%l:%m

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" #################### Key Mappings #################### 
let mapleader=","

" -: Move current line down
nnoremap - ddp

" _: Move current line up
nnoremap _ ddkP

" Edit Vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<cr>

" Source Vimrc
nnoremap <leader>sv :source $MYVIMRC<cr>

" Beginning of line
nnoremap H 0

" End of line
nnoremap L $

" Remap Esc to JK...
" Always use jk to return to normal mode
inoremap jk <esc>

" #################### powerline settings ####################  
set laststatus=2

" #################### Filetype Settings ####################  
" Makefile file settings -------------------- 
augroup filetype_make
  autocmd!
  " Don't expand tabs when editing makefiles
  autocmd! FileType make setlocal noexpandtab
augroup END

" Vimscript file settings -------------------- 
augroup filetype_vim
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
  autocmd FileType vim set foldlevelstart=0
augroup END
" 
" Text file settings -------------------- 
augroup filetype_txt
  autocmd BufNewFile,BufRead *.txt setlocal ft=none
  autocmd BufNewFile,BufRead *.txt setlocal spell
  autocmd BufNewFile,BufRead *.txt setlocal foldmethod=marker
augroup END

" #################### Miscellaneous Functions ####################  
" AlignEq() ------------------------------ 
" type ",=" to align a block of equals signs
if has('python')
python << endpython
def AlignEq():
  import vim
  maxspaces = 0
  for line in vim.current.range:
    equals = line.find('=')
    maxspaces = max(maxspaces, len(line[0:equals].rstrip()))

  for index, line in enumerate(vim.current.range):
    equals = line.find('=')
    if equals == -1: continue
    vim.current.range[index] = line[0:equals].rstrip() + ' ' * (maxspaces - len(line[0:equals].rstrip())) + ' = ' + line[equals+1:].lstrip()

endpython
vmap <leader>= :python AlignEq()<CR>
endif

" vim:syntax=vim
